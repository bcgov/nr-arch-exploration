name: metabase-image-builder-on-issue

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}
  APP_NAME: 'metabase'

on:
  issues:
    types: [opened, edited]

jobs:
  build-metabase-image:
    name: Build Metabase Image.
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: Metabase
    steps:
      
      - name: Check out repository
        uses: actions/checkout@v2
        
      - name: Issue Forms Body Parser
        id: parse
        uses: zentered/issue-forms-body-parser@v2.2.0
      
      - name: Stringify Result
        uses: actions/github-script@v6
        id: set-result
        with:
         script: |
           const data = ${{ steps.parse.outputs.data }};
           const version = data["metabase-version"].text;
           return version;
         result-encoding: string
      
      - name: check if build is required.
        id: check
        run: |
          # Check if version paramter is given.
          METABASE_VERSION=${{ steps.set-result.outputs.result }}
          URL="https://downloads.metabase.com/$METABASE_VERSION/metabase.jar"
          if [ -z $METABASE_VERSION ] || [  $(curl -ILso /dev/null -w "%{http_code}" "${URL}") -ne 200 ]
          then
            echo "::set-output name=build::false"
            exit 0
          fi
          echo "::set-output name=build::true"
          #
      
      - name: Set up Docker Buildx
        if: steps.check.outputs.build == 'true'
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        if: steps.check.outputs.build == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Log in to the Container registry
        if: steps.check.outputs.build == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Metabase image
        if: steps.check.outputs.build == 'true'
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            "${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ steps.set-result.outputs.result }}"
            "${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:latest"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: |
            ./Metabase/openshift/.pipeline/Dockerfile.openshift
          build-args: |
            METABASE_VERSION=${{ steps.set-result.outputs.result }}
      - name: Close Issue
        if: steps.check.outputs.build == 'true'
        uses: peter-evans/close-issue@v2
        with:
          comment: |
            Closing this issue as the metabase image is created and stored in the packages. 
            The Image should be now available for use at https://github.com/bcgov/nr-arch-templates/pkgs/container/nr-arch-templates%2Fmetabase
      - name: Close Issue
        if: steps.check.outputs.build == 'false'
        uses: peter-evans/close-issue@v2
        with:
          comment: |
            Closing this issue as the metabase version you provided is invalid. 
            
